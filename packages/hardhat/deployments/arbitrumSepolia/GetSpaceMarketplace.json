{
  "address": "0x838838b41760E5063ec3c65748FbD9E68820646e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPACE_OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_space",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "spaceAddress",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "Owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "paymentLink",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amountpaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum GetSpaceMarketplace.SpaceStatus",
          "name": "spaceStatus",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "videoImage",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_paymentLink",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "makePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "paymentClaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_spaceAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_videoImage",
          "type": "string"
        }
      ],
      "name": "registerSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "spaceIsAvailable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "spaceIsNotAvailable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spaceLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5cd34dce825d2de88fd6ae4507c0bebd656678a58c1fe0c43eddd43c2fec3040",
  "receipt": {
    "to": null,
    "from": "0x9dBa18e9b96b905919cC828C399d313EfD55D800",
    "contractAddress": "0x838838b41760E5063ec3c65748FbD9E68820646e",
    "transactionIndex": 1,
    "gasUsed": "2356066",
    "logsBloom": "0x
    "blockHash": "0x5210ef79abe5b8abefb64743c4f81fdad38b7ed17de27abdafbfa678840bf400",
    "transactionHash": "0x5cd34dce825d2de88fd6ae4507c0bebd656678a58c1fe0c43eddd43c2fec3040",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 51266419,
        "transactionHash": "0x5cd34dce825d2de88fd6ae4507c0bebd656678a58c1fe0c43eddd43c2fec3040",
        "address": "0x838838b41760E5063ec3c65748FbD9E68820646e",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xe1fe0134a237994d7170364e29d4d59535311f3b25fcb6b0e1b5b24f4da5fcc8",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5210ef79abe5b8abefb64743c4f81fdad38b7ed17de27abdafbfa678840bf400"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 51266419,
        "transactionHash": "0x5cd34dce825d2de88fd6ae4507c0bebd656678a58c1fe0c43eddd43c2fec3040",
        "address": "0x838838b41760E5063ec3c65748FbD9E68820646e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009dba18e9b96b905919cc828c399d313efd55d800",
          "0x0000000000000000000000009dba18e9b96b905919cc828c399d313efd55d800"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5210ef79abe5b8abefb64743c4f81fdad38b7ed17de27abdafbfa678840bf400"
      }
    ],
    "blockNumber": 51266419,
    "cumulativeGasUsed": "2356066",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "d9d758999f16041391a3b5ae0b27fdce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPACE_OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_space\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"spaceAddress\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"paymentLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountpaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum GetSpaceMarketplace.SpaceStatus\",\"name\":\"spaceStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"videoImage\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_paymentLink\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"makePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"paymentClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_spaceAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_videoImage\",\"type\":\"string\"}],\"name\":\"registerSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"spaceIsAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"spaceIsNotAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spaceLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GetSpaceMarketplace.sol\":\"GetSpaceMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/GetSpaceMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n// the owner of the space will be the one to make set the space is not available when they receive payment through their links\\n\\ncontract GetSpaceMarketplace is AccessControl {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\"); \\n    bytes32 public constant SPACE_OWNER_ROLE = keccak256(\\\"SPACE_OWNER\\\"); \\n    \\n\\n    uint256 public spaceLength;\\n\\n    address admin;\\n\\n    enum SpaceStatus {\\n        ACTIVE,\\n        AVAILABE,\\n        NOTAVAILABLE,\\n        DEPOSITED\\n    }\\n    struct Space {\\n        string name;\\n        string spaceAddress;\\n        address payable Owner;\\n        string paymentLink;\\n        string description;\\n        uint256 amountpaid;\\n        uint256 currentAmount;\\n        SpaceStatus spaceStatus;\\n        uint256 duration;\\n        string videoImage;\\n    }\\n\\n    constructor () {\\n        _setRoleAdmin(SPACE_OWNER_ROLE, DEFAULT_ADMIN_ROLE); \\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        admin = msg.sender;\\n    }\\n\\n    modifier onlySPace_Owner() {\\n        require(hasRole(SPACE_OWNER_ROLE, msg.sender), \\\"Only the house owner can call this function\\\");\\n        _;\\n    }\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n\\n    mapping (uint256 => Space) public _space;\\n\\n    function registerSpace(string memory _name, string memory _spaceAddress, string memory _description, uint256 _duration, string memory _videoImage) public onlyAdmin() {\\n        Space storage space = _space[spaceLength];\\n\\n        space.name = _name;\\n        space.Owner = payable (msg.sender);\\n        space.spaceAddress = _spaceAddress;\\n        // space.paymentLink = _paymentLink;\\n        space.description = _description;\\n        space.spaceStatus = SpaceStatus.AVAILABE;\\n        space.duration = _duration;\\n        space.videoImage = _videoImage;\\n        \\n        spaceLength++;\\n    }\\n\\n    function spaceIsNotAvailable(uint256 _index) public {\\n        require(spaceLength > 0, \\\"space not available\\\");\\n        require(_space[_index].Owner == msg.sender, \\\"you are not the owner of the space\\\");\\n        require(_space[_index].spaceStatus == SpaceStatus.AVAILABE, \\\"you are not the owner of the space\\\");\\n\\n        Space storage space = _space[_index];\\n        space.spaceStatus = SpaceStatus.NOTAVAILABLE;\\n    }\\n\\n    function spaceIsAvailable(uint256 _index) public {\\n        require(spaceLength > 0, \\\"space not available\\\");\\n        require(_space[_index].Owner == msg.sender, \\\"you are not the owner of the space\\\");\\n\\n        Space storage space = _space[_index];\\n        space.spaceStatus = SpaceStatus.AVAILABE;\\n    }\\n\\n    function makePayment(uint256 _index, string memory _paymentLink, uint256 _duration) public {\\n        require(spaceLength > 0, \\\"space not available\\\");\\n        require(_space[_index].Owner == msg.sender, \\\"you are not the owner of the space\\\");\\n    \\n        Space storage space = _space[_index];\\n        space.duration = _duration;\\n        space.paymentLink = _paymentLink;\\n        space.spaceStatus = SpaceStatus.DEPOSITED;\\n    }\\n\\n    function paymentClaimed(uint256 _index) public {\\n        require(_space[_index].spaceStatus == SpaceStatus.DEPOSITED,\\\"nobody deposit to this smart contract\\\" );\\n        Space storage space = _space[_index];\\n        // duration is part month\\n        \\n        uint256 newDuration = space.duration;\\n         uint256 durationrent = block.timestamp + newDuration * 1 * 24 * 60 * 60;\\n        //  uint256 toGetPay = block.timestamp + 12 * 30.44 * 24 * 60 * 60;\\n        if (block.timestamp >= durationrent) {\\n            space.duration = 0;\\n            space.spaceStatus = SpaceStatus.AVAILABE;\\n            space.paymentLink = \\\"\\\";\\n        }\\n\\n        // to confirm the child is above or already 18 years with conversion of the block timestamp\\n        // uint256 toGetPay = currentTimeStap + 18 * 365 * 24 * 60 * 60;\\n\\n    }\\n\\n\\n\\n    \\n}\",\"keccak256\":\"0x6e49650ffd85dc7084b975d123a05b44896241d06a556d83c7799f4abc0e2da6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000477fe1fe0134a237994d7170364e29d4d59535311f3b25fcb6b0e1b5b24f4da5fcc86000801b620000a360201b60201c565b6200005c6000801b336200010660201b60201c565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000288565b6000620000b683620001f760201b60201c565b905081600080858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6200011882826200021660201b60201c565b620001f357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001986200028060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000806000838152602001908152602001600020600101549050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b61243280620002986000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637b6b99121161009757806394d85fc71161006657806394d85fc7146102b2578063a217fddf146102ce578063a9e10749146102ec578063d547741f1461030a57610100565b80637b6b99121461022c5780637e6945c1146102485780638c643e1b1461026657806391d148541461028257610100565b80632f2ff15d116100d35780632f2ff15d1461019d578063359d28f8146101b957806336568abe146101f257806375b238fc1461020e57610100565b806301ffc9a71461010557806302705531146101355780631d53606014610151578063248a9ca31461016d575b600080fd5b61011f600480360381019061011a91906114f8565b610326565b60405161012c9190611540565b60405180910390f35b61014f600480360381019061014a9190611591565b6103a0565b005b61016b60048036038101906101669190611591565b6104d1565b005b610187600480360381019061018291906115f4565b61061f565b6040516101949190611630565b60405180910390f35b6101b760048036038101906101b291906116a9565b61063e565b005b6101d360048036038101906101ce9190611591565b61065f565b6040516101e99a99989796959493929190611820565b60405180910390f35b61020c600480360381019061020791906116a9565b610988565b005b610216610a0b565b6040516102239190611630565b60405180910390f35b61024660048036038101906102419190611591565b610a2f565b005b610250610bea565b60405161025d9190611630565b60405180910390f35b610280600480360381019061027b9190611a14565b610c0e565b005b61029c600480360381019061029791906116a9565b610d71565b6040516102a99190611540565b60405180910390f35b6102cc60048036038101906102c79190611aff565b610ddb565b005b6102d6610f29565b6040516102e39190611630565b60405180910390f35b6102f4610f30565b6040516103019190611b6e565b60405180910390f35b610324600480360381019061031f91906116a9565b610f36565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610399575061039882610f57565b5b9050919050565b6000600154116103e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dc90611bd5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048090611c67565b60405180910390fd5b600060036000838152602001908152602001600020905060018160070160006101000a81548160ff021916908360038111156104c8576104c76117a9565b5b02179055505050565b6003808111156104e4576104e36117a9565b5b6003600083815260200190815260200160002060070160009054906101000a900460ff16600381111561051a576105196117a9565b5b1461055a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055190611cf9565b60405180910390fd5b60006003600083815260200190815260200160002090506000816008015490506000603c80601860018561058e9190611d48565b6105989190611d48565b6105a29190611d48565b6105ac9190611d48565b426105b79190611d8a565b9050804210610619576000836008018190555060018360070160006101000a81548160ff021916908360038111156105f2576105f16117a9565b5b0217905550604051806020016040528060008152508360030190816106179190611fca565b505b50505050565b6000806000838152602001908152602001600020600101549050919050565b6106478261061f565b61065081610fc1565b61065a8383610fd5565b505050565b600360205280600052604060002060009150905080600001805461068290611ded565b80601f01602080910402602001604051908101604052809291908181526020018280546106ae90611ded565b80156106fb5780601f106106d0576101008083540402835291602001916106fb565b820191906000526020600020905b8154815290600101906020018083116106de57829003601f168201915b50505050509080600101805461071090611ded565b80601f016020809104026020016040519081016040528092919081815260200182805461073c90611ded565b80156107895780601f1061075e57610100808354040283529160200191610789565b820191906000526020600020905b81548152906001019060200180831161076c57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030180546107c490611ded565b80601f01602080910402602001604051908101604052809291908181526020018280546107f090611ded565b801561083d5780601f106108125761010080835404028352916020019161083d565b820191906000526020600020905b81548152906001019060200180831161082057829003601f168201915b50505050509080600401805461085290611ded565b80601f016020809104026020016040519081016040528092919081815260200182805461087e90611ded565b80156108cb5780601f106108a0576101008083540402835291602001916108cb565b820191906000526020600020905b8154815290600101906020018083116108ae57829003601f168201915b5050505050908060050154908060060154908060070160009054906101000a900460ff169080600801549080600901805461090590611ded565b80601f016020809104026020016040519081016040528092919081815260200182805461093190611ded565b801561097e5780601f106109535761010080835404028352916020019161097e565b820191906000526020600020905b81548152906001019060200180831161096157829003601f168201915b505050505090508a565b6109906110b5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f49061210e565b60405180910390fd5b610a0782826110bd565b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b600060015411610a74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6b90611bd5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0f90611c67565b60405180910390fd5b60016003811115610b2c57610b2b6117a9565b5b6003600083815260200190815260200160002060070160009054906101000a900460ff166003811115610b6257610b616117a9565b5b14610ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9990611c67565b60405180910390fd5b600060036000838152602001908152602001600020905060028160070160006101000a81548160ff02191690836003811115610be157610be06117a9565b5b02179055505050565b7fe1fe0134a237994d7170364e29d4d59535311f3b25fcb6b0e1b5b24f4da5fcc881565b610c387fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610d71565b610c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6e906121a0565b60405180910390fd5b6000600360006001548152602001908152602001600020905085816000019081610ca19190611fca565b50338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084816001019081610cf69190611fca565b5083816004019081610d089190611fca565b5060018160070160006101000a81548160ff02191690836003811115610d3157610d306117a9565b5b021790555082816008018190555081816009019081610d509190611fca565b5060016000815480929190610d64906121c0565b9190505550505050505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600060015411610e20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1790611bd5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166003600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebb90611c67565b60405180910390fd5b600060036000858152602001908152602001600020905081816008018190555082816003019081610ef59190611fca565b5060038160070160006101000a81548160ff02191690836003811115610f1e57610f1d6117a9565b5b021790555050505050565b6000801b81565b60015481565b610f3f8261061f565b610f4881610fc1565b610f5283836110bd565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610fd281610fcd6110b5565b61119e565b50565b610fdf8282610d71565b6110b157600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506110566110b5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6110c78282610d71565b1561119a57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061113f6110b5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6111a88282610d71565b61121f576111b581611223565b6111c38360001c6020611250565b6040516020016111d49291906122dc565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112169190612316565b60405180910390fd5b5050565b60606112498273ffffffffffffffffffffffffffffffffffffffff16601460ff16611250565b9050919050565b6060600060028360026112639190611d48565b61126d9190611d8a565b67ffffffffffffffff811115611286576112856118e9565b5b6040519080825280601f01601f1916602001820160405280156112b85781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106112f0576112ef612338565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061135457611353612338565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026113949190611d48565b61139e9190611d8a565b90505b600181111561143e577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106113e0576113df612338565b5b1a60f81b8282815181106113f7576113f6612338565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061143790612367565b90506113a1565b5060008414611482576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611479906123dc565b60405180910390fd5b8091505092915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6114d5816114a0565b81146114e057600080fd5b50565b6000813590506114f2816114cc565b92915050565b60006020828403121561150e5761150d611496565b5b600061151c848285016114e3565b91505092915050565b60008115159050919050565b61153a81611525565b82525050565b60006020820190506115556000830184611531565b92915050565b6000819050919050565b61156e8161155b565b811461157957600080fd5b50565b60008135905061158b81611565565b92915050565b6000602082840312156115a7576115a6611496565b5b60006115b58482850161157c565b91505092915050565b6000819050919050565b6115d1816115be565b81146115dc57600080fd5b50565b6000813590506115ee816115c8565b92915050565b60006020828403121561160a57611609611496565b5b6000611618848285016115df565b91505092915050565b61162a816115be565b82525050565b60006020820190506116456000830184611621565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116768261164b565b9050919050565b6116868161166b565b811461169157600080fd5b50565b6000813590506116a38161167d565b92915050565b600080604083850312156116c0576116bf611496565b5b60006116ce858286016115df565b92505060206116df85828601611694565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611723578082015181840152602081019050611708565b60008484015250505050565b6000601f19601f8301169050919050565b600061174b826116e9565b61175581856116f4565b9350611765818560208601611705565b61176e8161172f565b840191505092915050565b60006117848261164b565b9050919050565b61179481611779565b82525050565b6117a38161155b565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106117e9576117e86117a9565b5b50565b60008190506117fa826117d8565b919050565b600061180a826117ec565b9050919050565b61181a816117ff565b82525050565b600061014082019050818103600083015261183b818d611740565b9050818103602083015261184f818c611740565b905061185e604083018b61178b565b8181036060830152611870818a611740565b905081810360808301526118848189611740565b905061189360a083018861179a565b6118a060c083018761179a565b6118ad60e0830186611811565b6118bb61010083018561179a565b8181036101208301526118ce8184611740565b90509b9a5050505050505050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119218261172f565b810181811067ffffffffffffffff821117156119405761193f6118e9565b5b80604052505050565b600061195361148c565b905061195f8282611918565b919050565b600067ffffffffffffffff82111561197f5761197e6118e9565b5b6119888261172f565b9050602081019050919050565b82818337600083830152505050565b60006119b76119b284611964565b611949565b9050828152602081018484840111156119d3576119d26118e4565b5b6119de848285611995565b509392505050565b600082601f8301126119fb576119fa6118df565b5b8135611a0b8482602086016119a4565b91505092915050565b600080600080600060a08688031215611a3057611a2f611496565b5b600086013567ffffffffffffffff811115611a4e57611a4d61149b565b5b611a5a888289016119e6565b955050602086013567ffffffffffffffff811115611a7b57611a7a61149b565b5b611a87888289016119e6565b945050604086013567ffffffffffffffff811115611aa857611aa761149b565b5b611ab4888289016119e6565b9350506060611ac58882890161157c565b925050608086013567ffffffffffffffff811115611ae657611ae561149b565b5b611af2888289016119e6565b9150509295509295909350565b600080600060608486031215611b1857611b17611496565b5b6000611b268682870161157c565b935050602084013567ffffffffffffffff811115611b4757611b4661149b565b5b611b53868287016119e6565b9250506040611b648682870161157c565b9150509250925092565b6000602082019050611b83600083018461179a565b92915050565b7f7370616365206e6f7420617661696c61626c6500000000000000000000000000600082015250565b6000611bbf6013836116f4565b9150611bca82611b89565b602082019050919050565b60006020820190508181036000830152611bee81611bb2565b9050919050565b7f796f7520617265206e6f7420746865206f776e6572206f66207468652073706160008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c516022836116f4565b9150611c5c82611bf5565b604082019050919050565b60006020820190508181036000830152611c8081611c44565b9050919050565b7f6e6f626f6479206465706f73697420746f207468697320736d61727420636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b6000611ce36025836116f4565b9150611cee82611c87565b604082019050919050565b60006020820190508181036000830152611d1281611cd6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d538261155b565b9150611d5e8361155b565b9250828202611d6c8161155b565b91508282048414831517611d8357611d82611d19565b5b5092915050565b6000611d958261155b565b9150611da08361155b565b9250828201905080821115611db857611db7611d19565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e0557607f821691505b602082108103611e1857611e17611dbe565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611e807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611e43565b611e8a8683611e43565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611ec7611ec2611ebd8461155b565b611ea2565b61155b565b9050919050565b6000819050919050565b611ee183611eac565b611ef5611eed82611ece565b848454611e50565b825550505050565b600090565b611f0a611efd565b611f15818484611ed8565b505050565b5b81811015611f3957611f2e600082611f02565b600181019050611f1b565b5050565b601f821115611f7e57611f4f81611e1e565b611f5884611e33565b81016020851015611f67578190505b611f7b611f7385611e33565b830182611f1a565b50505b505050565b600082821c905092915050565b6000611fa160001984600802611f83565b1980831691505092915050565b6000611fba8383611f90565b9150826002028217905092915050565b611fd3826116e9565b67ffffffffffffffff811115611fec57611feb6118e9565b5b611ff68254611ded565b612001828285611f3d565b600060209050601f8311600181146120345760008415612022578287015190505b61202c8582611fae565b865550612094565b601f19841661204286611e1e565b60005b8281101561206a57848901518255600182019150602085019450602081019050612045565b868310156120875784890151612083601f891682611f90565b8355505b6001600288020188555050505b505050505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006120f8602f836116f4565b91506121038261209c565b604082019050919050565b60006020820190508181036000830152612127816120eb565b9050919050565b7f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b600061218a6021836116f4565b91506121958261212e565b604082019050919050565b600060208201905081810360008301526121b98161217d565b9050919050565b60006121cb8261155b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036121fd576121fc611d19565b5b600182019050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612249601783612208565b915061225482612213565b601782019050919050565b600061226a826116e9565b6122748185612208565b9350612284818560208601611705565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006122c6601183612208565b91506122d182612290565b601182019050919050565b60006122e78261223c565b91506122f3828561225f565b91506122fe826122b9565b915061230a828461225f565b91508190509392505050565b600060208201905081810360008301526123308184611740565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006123728261155b565b91506000820361238557612384611d19565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006123c66020836116f4565b91506123d182612390565b602082019050919050565b600060208201905081810360008301526123f5816123b9565b905091905056fea2646970667358221220be3ded6bd32aa631239b94cc788078c86122e8d7425925cf3254b50616f134ee64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80637b6b99121161009757806394d85fc71161006657806394d85fc7146102b2578063a217fddf146102ce578063a9e10749146102ec578063d547741f1461030a57610100565b80637b6b99121461022c5780637e6945c1146102485780638c643e1b1461026657806391d148541461028257610100565b80632f2ff15d116100d35780632f2ff15d1461019d578063359d28f8146101b957806336568abe146101f257806375b238fc1461020e57610100565b806301ffc9a71461010557806302705531146101355780631d53606014610151578063248a9ca31461016d575b600080fd5b61011f600480360381019061011a91906114f8565b610326565b60405161012c9190611540565b60405180910390f35b61014f600480360381019061014a9190611591565b6103a0565b005b61016b60048036038101906101669190611591565b6104d1565b005b610187600480360381019061018291906115f4565b61061f565b6040516101949190611630565b60405180910390f35b6101b760048036038101906101b291906116a9565b61063e565b005b6101d360048036038101906101ce9190611591565b61065f565b6040516101e99a99989796959493929190611820565b60405180910390f35b61020c600480360381019061020791906116a9565b610988565b005b610216610a0b565b6040516102239190611630565b60405180910390f35b61024660048036038101906102419190611591565b610a2f565b005b610250610bea565b60405161025d9190611630565b60405180910390f35b610280600480360381019061027b9190611a14565b610c0e565b005b61029c600480360381019061029791906116a9565b610d71565b6040516102a99190611540565b60405180910390f35b6102cc60048036038101906102c79190611aff565b610ddb565b005b6102d6610f29565b6040516102e39190611630565b60405180910390f35b6102f4610f30565b6040516103019190611b6e565b60405180910390f35b610324600480360381019061031f91906116a9565b610f36565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610399575061039882610f57565b5b9050919050565b6000600154116103e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dc90611bd5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048090611c67565b60405180910390fd5b600060036000838152602001908152602001600020905060018160070160006101000a81548160ff021916908360038111156104c8576104c76117a9565b5b02179055505050565b6003808111156104e4576104e36117a9565b5b6003600083815260200190815260200160002060070160009054906101000a900460ff16600381111561051a576105196117a9565b5b1461055a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055190611cf9565b60405180910390fd5b60006003600083815260200190815260200160002090506000816008015490506000603c80601860018561058e9190611d48565b6105989190611d48565b6105a29190611d48565b6105ac9190611d48565b426105b79190611d8a565b9050804210610619576000836008018190555060018360070160006101000a81548160ff021916908360038111156105f2576105f16117a9565b5b0217905550604051806020016040528060008152508360030190816106179190611fca565b505b50505050565b6000806000838152602001908152602001600020600101549050919050565b6106478261061f565b61065081610fc1565b61065a8383610fd5565b505050565b600360205280600052604060002060009150905080600001805461068290611ded565b80601f01602080910402602001604051908101604052809291908181526020018280546106ae90611ded565b80156106fb5780601f106106d0576101008083540402835291602001916106fb565b820191906000526020600020905b8154815290600101906020018083116106de57829003601f168201915b50505050509080600101805461071090611ded565b80601f016020809104026020016040519081016040528092919081815260200182805461073c90611ded565b80156107895780601f1061075e57610100808354040283529160200191610789565b820191906000526020600020905b81548152906001019060200180831161076c57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030180546107c490611ded565b80601f01602080910402602001604051908101604052809291908181526020018280546107f090611ded565b801561083d5780601f106108125761010080835404028352916020019161083d565b820191906000526020600020905b81548152906001019060200180831161082057829003601f168201915b50505050509080600401805461085290611ded565b80601f016020809104026020016040519081016040528092919081815260200182805461087e90611ded565b80156108cb5780601f106108a0576101008083540402835291602001916108cb565b820191906000526020600020905b8154815290600101906020018083116108ae57829003601f168201915b5050505050908060050154908060060154908060070160009054906101000a900460ff169080600801549080600901805461090590611ded565b80601f016020809104026020016040519081016040528092919081815260200182805461093190611ded565b801561097e5780601f106109535761010080835404028352916020019161097e565b820191906000526020600020905b81548152906001019060200180831161096157829003601f168201915b505050505090508a565b6109906110b5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f49061210e565b60405180910390fd5b610a0782826110bd565b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b600060015411610a74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6b90611bd5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0f90611c67565b60405180910390fd5b60016003811115610b2c57610b2b6117a9565b5b6003600083815260200190815260200160002060070160009054906101000a900460ff166003811115610b6257610b616117a9565b5b14610ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9990611c67565b60405180910390fd5b600060036000838152602001908152602001600020905060028160070160006101000a81548160ff02191690836003811115610be157610be06117a9565b5b02179055505050565b7fe1fe0134a237994d7170364e29d4d59535311f3b25fcb6b0e1b5b24f4da5fcc881565b610c387fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610d71565b610c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6e906121a0565b60405180910390fd5b6000600360006001548152602001908152602001600020905085816000019081610ca19190611fca565b50338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084816001019081610cf69190611fca565b5083816004019081610d089190611fca565b5060018160070160006101000a81548160ff02191690836003811115610d3157610d306117a9565b5b021790555082816008018190555081816009019081610d509190611fca565b5060016000815480929190610d64906121c0565b9190505550505050505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600060015411610e20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1790611bd5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166003600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebb90611c67565b60405180910390fd5b600060036000858152602001908152602001600020905081816008018190555082816003019081610ef59190611fca565b5060038160070160006101000a81548160ff02191690836003811115610f1e57610f1d6117a9565b5b021790555050505050565b6000801b81565b60015481565b610f3f8261061f565b610f4881610fc1565b610f5283836110bd565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610fd281610fcd6110b5565b61119e565b50565b610fdf8282610d71565b6110b157600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506110566110b5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6110c78282610d71565b1561119a57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061113f6110b5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6111a88282610d71565b61121f576111b581611223565b6111c38360001c6020611250565b6040516020016111d49291906122dc565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112169190612316565b60405180910390fd5b5050565b60606112498273ffffffffffffffffffffffffffffffffffffffff16601460ff16611250565b9050919050565b6060600060028360026112639190611d48565b61126d9190611d8a565b67ffffffffffffffff811115611286576112856118e9565b5b6040519080825280601f01601f1916602001820160405280156112b85781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106112f0576112ef612338565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061135457611353612338565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026113949190611d48565b61139e9190611d8a565b90505b600181111561143e577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106113e0576113df612338565b5b1a60f81b8282815181106113f7576113f6612338565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061143790612367565b90506113a1565b5060008414611482576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611479906123dc565b60405180910390fd5b8091505092915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6114d5816114a0565b81146114e057600080fd5b50565b6000813590506114f2816114cc565b92915050565b60006020828403121561150e5761150d611496565b5b600061151c848285016114e3565b91505092915050565b60008115159050919050565b61153a81611525565b82525050565b60006020820190506115556000830184611531565b92915050565b6000819050919050565b61156e8161155b565b811461157957600080fd5b50565b60008135905061158b81611565565b92915050565b6000602082840312156115a7576115a6611496565b5b60006115b58482850161157c565b91505092915050565b6000819050919050565b6115d1816115be565b81146115dc57600080fd5b50565b6000813590506115ee816115c8565b92915050565b60006020828403121561160a57611609611496565b5b6000611618848285016115df565b91505092915050565b61162a816115be565b82525050565b60006020820190506116456000830184611621565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116768261164b565b9050919050565b6116868161166b565b811461169157600080fd5b50565b6000813590506116a38161167d565b92915050565b600080604083850312156116c0576116bf611496565b5b60006116ce858286016115df565b92505060206116df85828601611694565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611723578082015181840152602081019050611708565b60008484015250505050565b6000601f19601f8301169050919050565b600061174b826116e9565b61175581856116f4565b9350611765818560208601611705565b61176e8161172f565b840191505092915050565b60006117848261164b565b9050919050565b61179481611779565b82525050565b6117a38161155b565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106117e9576117e86117a9565b5b50565b60008190506117fa826117d8565b919050565b600061180a826117ec565b9050919050565b61181a816117ff565b82525050565b600061014082019050818103600083015261183b818d611740565b9050818103602083015261184f818c611740565b905061185e604083018b61178b565b8181036060830152611870818a611740565b905081810360808301526118848189611740565b905061189360a083018861179a565b6118a060c083018761179a565b6118ad60e0830186611811565b6118bb61010083018561179a565b8181036101208301526118ce8184611740565b90509b9a5050505050505050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119218261172f565b810181811067ffffffffffffffff821117156119405761193f6118e9565b5b80604052505050565b600061195361148c565b905061195f8282611918565b919050565b600067ffffffffffffffff82111561197f5761197e6118e9565b5b6119888261172f565b9050602081019050919050565b82818337600083830152505050565b60006119b76119b284611964565b611949565b9050828152602081018484840111156119d3576119d26118e4565b5b6119de848285611995565b509392505050565b600082601f8301126119fb576119fa6118df565b5b8135611a0b8482602086016119a4565b91505092915050565b600080600080600060a08688031215611a3057611a2f611496565b5b600086013567ffffffffffffffff811115611a4e57611a4d61149b565b5b611a5a888289016119e6565b955050602086013567ffffffffffffffff811115611a7b57611a7a61149b565b5b611a87888289016119e6565b945050604086013567ffffffffffffffff811115611aa857611aa761149b565b5b611ab4888289016119e6565b9350506060611ac58882890161157c565b925050608086013567ffffffffffffffff811115611ae657611ae561149b565b5b611af2888289016119e6565b9150509295509295909350565b600080600060608486031215611b1857611b17611496565b5b6000611b268682870161157c565b935050602084013567ffffffffffffffff811115611b4757611b4661149b565b5b611b53868287016119e6565b9250506040611b648682870161157c565b9150509250925092565b6000602082019050611b83600083018461179a565b92915050565b7f7370616365206e6f7420617661696c61626c6500000000000000000000000000600082015250565b6000611bbf6013836116f4565b9150611bca82611b89565b602082019050919050565b60006020820190508181036000830152611bee81611bb2565b9050919050565b7f796f7520617265206e6f7420746865206f776e6572206f66207468652073706160008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c516022836116f4565b9150611c5c82611bf5565b604082019050919050565b60006020820190508181036000830152611c8081611c44565b9050919050565b7f6e6f626f6479206465706f73697420746f207468697320736d61727420636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b6000611ce36025836116f4565b9150611cee82611c87565b604082019050919050565b60006020820190508181036000830152611d1281611cd6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d538261155b565b9150611d5e8361155b565b9250828202611d6c8161155b565b91508282048414831517611d8357611d82611d19565b5b5092915050565b6000611d958261155b565b9150611da08361155b565b9250828201905080821115611db857611db7611d19565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e0557607f821691505b602082108103611e1857611e17611dbe565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611e807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611e43565b611e8a8683611e43565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611ec7611ec2611ebd8461155b565b611ea2565b61155b565b9050919050565b6000819050919050565b611ee183611eac565b611ef5611eed82611ece565b848454611e50565b825550505050565b600090565b611f0a611efd565b611f15818484611ed8565b505050565b5b81811015611f3957611f2e600082611f02565b600181019050611f1b565b5050565b601f821115611f7e57611f4f81611e1e565b611f5884611e33565b81016020851015611f67578190505b611f7b611f7385611e33565b830182611f1a565b50505b505050565b600082821c905092915050565b6000611fa160001984600802611f83565b1980831691505092915050565b6000611fba8383611f90565b9150826002028217905092915050565b611fd3826116e9565b67ffffffffffffffff811115611fec57611feb6118e9565b5b611ff68254611ded565b612001828285611f3d565b600060209050601f8311600181146120345760008415612022578287015190505b61202c8582611fae565b865550612094565b601f19841661204286611e1e565b60005b8281101561206a57848901518255600182019150602085019450602081019050612045565b868310156120875784890151612083601f891682611f90565b8355505b6001600288020188555050505b505050505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006120f8602f836116f4565b91506121038261209c565b604082019050919050565b60006020820190508181036000830152612127816120eb565b9050919050565b7f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b600061218a6021836116f4565b91506121958261212e565b604082019050919050565b600060208201905081810360008301526121b98161217d565b9050919050565b60006121cb8261155b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036121fd576121fc611d19565b5b600182019050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612249601783612208565b915061225482612213565b601782019050919050565b600061226a826116e9565b6122748185612208565b9350612284818560208601611705565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006122c6601183612208565b91506122d182612290565b601182019050919050565b60006122e78261223c565b91506122f3828561225f565b91506122fe826122b9565b915061230a828461225f565b91508190509392505050565b600060208201905081810360008301526123308184611740565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006123728261155b565b91506000820361238557612384611d19565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006123c66020836116f4565b91506123d182612390565b602082019050919050565b600060208201905081810360008301526123f5816123b9565b905091905056fea2646970667358221220be3ded6bd32aa631239b94cc788078c86122e8d7425925cf3254b50616f134ee64736f6c63430008140033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1884,
        "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
        "label": "spaceLength",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1886,
        "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1964,
        "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
        "label": "_space",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Space)1913_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(SpaceStatus)1891": {
        "encoding": "inplace",
        "label": "enum GetSpaceMarketplace.SpaceStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(Space)1913_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GetSpaceMarketplace.Space)",
        "numberOfBytes": "32",
        "value": "t_struct(Space)1913_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Space)1913_storage": {
        "encoding": "inplace",
        "label": "struct GetSpaceMarketplace.Space",
        "members": [
          {
            "astId": 1893,
            "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1895,
            "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
            "label": "spaceAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1897,
            "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
            "label": "Owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 1899,
            "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
            "label": "paymentLink",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1901,
            "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1903,
            "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
            "label": "amountpaid",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1905,
            "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
            "label": "currentAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1908,
            "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
            "label": "spaceStatus",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(SpaceStatus)1891"
          },
          {
            "astId": 1910,
            "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
            "label": "duration",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1912,
            "contract": "contracts/GetSpaceMarketplace.sol:GetSpaceMarketplace",
            "label": "videoImage",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}